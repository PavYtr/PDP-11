"""
Модуль работы с памятью PDP-11.

Этот модуль предоставляет функции для загрузки данных в память эмулятора
и вывода дампа памяти в различных форматах.

Основные функции:
- load_data - загрузка данных из файла в память
- mem_dump - вывод дампа памяти в восьмеричном и шестнадцатеричном форматах

Зависимости:
- Использует функции b_write, w_read и массив mem из модуля pdp_11_mem

Формат входного файла для load_data:
    Каждый блок данных начинается со строки, содержащей:
    - начальный адрес (в 16-ричном формате)
    - количество байт (в 16-ричном формате)
    Далее следует указанное количество строк с байтами данных (в 16-ричном формате)
"""

from pdp_11_mem import b_write, mem, w_read

def load_data(filename):
    """
    Загружает данные в память эмулятора из текстового файла специального формата.

    Формат файла:
        Каждый блок данных состоит из:
        1. Строки с начальным адресом и количеством байт (в 16-ричном формате)
        2. Указанного количества строк с байтами данных (в 16-ричном формате)

    Args:
        filename (str): Путь к файлу с данными для загрузки

    Пример файла:
        40 4       # Записать 4 байта начиная с адреса 0x40
        12         # Байт 0x12 по адресу 0x40
        34         # Байт 0x34 по адресу 0x41
        56         # Байт 0x56 по адресу 0x42
        78         # Байт 0x78 по адресу 0x43
    """
    with open(filename, 'r') as file:
        while True:
            line = file.readline().strip()
            if not line:
                break

            address, n = map(lambda x: int(x, 16), line.split())
            for i in range(n):
                byte = int(file.readline().strip(), 16)
                b_write(address + i, byte)


def mem_dump(address, size):
    """
    Выводит дамп памяти в терминал в восьмеричном и шестнадцатеричном форматах.

    Для каждого адреса выводит:
    - Адрес (6 цифр, восьмеричное)
    - Значение слова (6 цифр, восьмеричное)
    - Значение слова (4 цифры, шестнадцатеричное)

    Args:
        address (int): Начальный адрес для дампа (в байтах)
        size (int): Количество байт для вывода (дамп будет выровнен по словам)

    Пример вывода:
        000040: 012345 1234  # Адрес 040o, значение 012345o (1234h)
        000042: 056701 5671  # Адрес 042o, значение 056701o (5671h)
    """
    for i in range(0, size, 2):
        print(f"{address + i:06o}: ", end='')
        print(f"{w_read(address + i):06o}", end=' ')
        print(f"{w_read(address + i):04x}", end='\n')


# if __name__ == "__main__":
#     load_data("tests.txt")
#     mem_dump(0x40, 20)
#     print()
#     mem_dump(0x200, 0x26)